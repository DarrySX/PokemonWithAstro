---
import { ThemeToggle } from '@components/ThemeToggle';

const links = [
  { href: '/', text: 'Inicio', icon: '🏠' },
  { href: '/pokemons/1', text: 'Paginado', icon: '📄' },
  { href: '/favorites', text: 'Favoritos', icon: '❤️' },
  { href: '/islands', text: 'Islas', icon: '🏝️' },
  { href: '/demo', text: 'Demo', icon: '🧪' },
  { href: '/test-counter', text: 'Test', icon: '🔢' },
];

const currentPath = Astro.url.pathname;
---

<nav class="sticky top-0 z-50 border-b border-gray-200 bg-white/80 backdrop-blur-md dark:border-gray-700 dark:bg-gray-900/80">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-2 text-xl font-bold text-gray-900 dark:text-white">
          <span class="text-2xl">⚡</span>
          <span class="hidden sm:block">Pokémon App</span>
        </a>
      </div>
      
      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="flex items-center space-x-1">
          {links.map(({ href, text, icon }) => (
            <div class="relative">
              <a
                href={href}
                class={`
                  relative inline-flex items-center space-x-2 rounded-lg px-3 py-2 text-sm font-medium transition-all duration-200
                  ${currentPath === href 
                    ? 'bg-primary-100 text-primary-700 dark:bg-primary-900/30 dark:text-primary-300' 
                    : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white'
                  }
                `}
              >
                <span class="text-base">{icon}</span>
                <span class="hidden lg:block">{text}</span>
              </a>
              
              {currentPath === href && (
                <div
                  transition:name="nav-indicator"
                  class="absolute -bottom-3 left-1/2 h-0.5 w-8 -translate-x-1/2 rounded-full bg-primary-600 dark:bg-primary-400"
                />
              )}
            </div>
          ))}
        </div>
      </div>
      
      <!-- Theme Toggle & Mobile Menu Button -->
      <div class="flex items-center space-x-2">
        <ThemeToggle client:only="solid-js" />
        
        <!-- Mobile menu button -->
        <button
          id="mobile-menu-button"
          class="md:hidden inline-flex items-center justify-center rounded-lg p-2 text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white"
          aria-expanded="false"
        >
          <span class="sr-only">Abrir menú principal</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu -->
  <div id="mobile-menu" class="hidden border-t border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-900 md:hidden">
    <div class="space-y-1 px-4 py-2">
      {links.map(({ href, text, icon }) => (
        <a
          href={href}
          class={`
            flex items-center space-x-3 rounded-lg px-3 py-2 text-base font-medium transition-colors
            ${currentPath === href 
              ? 'bg-primary-100 text-primary-700 dark:bg-primary-900/30 dark:text-primary-300' 
              : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-300 dark:hover:bg-gray-800 dark:hover:text-white'
            }
          `}
        >
          <span class="text-lg">{icon}</span>
          <span>{text}</span>
        </a>
      ))}
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (menuButton && mobileMenu) {
      menuButton.addEventListener('click', () => {
        const isOpen = !mobileMenu.classList.contains('hidden');
        
        if (isOpen) {
          mobileMenu.classList.add('hidden');
          menuButton.setAttribute('aria-expanded', 'false');
        } else {
          mobileMenu.classList.remove('hidden');
          menuButton.setAttribute('aria-expanded', 'true');
        }
      });
      
      // Close mobile menu when clicking on a link
      const mobileLinks = mobileMenu.querySelectorAll('a');
      mobileLinks.forEach(link => {
        link.addEventListener('click', () => {
          mobileMenu.classList.add('hidden');
          menuButton.setAttribute('aria-expanded', 'false');
        });
      });
    }
  });
  
  // Handle astro page load for mobile menu
  document.addEventListener('astro:page-load', () => {
    const mobileMenu = document.getElementById('mobile-menu');
    const menuButton = document.getElementById('mobile-menu-button');
    
    if (mobileMenu && menuButton) {
      mobileMenu.classList.add('hidden');
      menuButton.setAttribute('aria-expanded', 'false');
    }
  });
</script>
